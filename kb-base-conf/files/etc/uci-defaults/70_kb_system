#!/bin/sh

. /lib/functions.sh

kb_init_config() {
	local board_uid="${1}"
	#Initialize config
	touch /etc/config/kb
	uci set kb.main='box'
	uci -q batch <<-EOF
		set kb.main.state='$(uci get kboxes.default.state)'
		set kb.main.dist_id='$(uci get kboxes.default.dist_id)'
		set kb.main.box_id='$(uci get kboxes.default.box_id)'
		set kb.main.box_name='$(uci get kboxes.default.box_name)'
	EOF
	[ "$(uci get kb.main.state)" = "u" ] && {
		[ -n "$(uci -q get kboxes.${board_uid})" ] && {
			uci -q batch <<-EOF
				set kb.main.state='$(uci get kboxes.${board_uid}.state)'
				set kb.main.dist_id='$(uci get kboxes.${board_uid}.dist_id)'
				set kb.main.box_id='$(uci get kboxes.${board_uid}.box_id)'
				set kb.main.box_name='$(uci get kboxes.${board_uid}.box_name)'
			EOF
		}
	}
	[ "$(uci get kb.main.state)" = "u" ] && {
		uci -q batch <<-EOF
			set kb.main.state='a'
			set kb.main.dist_id='fd'
			set kb.main.box_id='${board_uid: -2}'
			set kb.main.box_name='Auto-${board_uid}'
		EOF
	}
	local dist_id="$(uci get kb.main.dist_id)"
	[ -n "$(uci -q get kbdist.${dist_id})" ] && {
		uci set kb.main.dist_name="$(uci -q get kbdist.${dist_id}.name)"
	}
}

kb_config_system() {
	local state="$(uci get kb.main.state)"
	local dist_id="$(uci get kb.main.dist_id)"
	local dist_name="$(uci get kb.main.dist_name)"
	local box_id="$(uci get kb.main.box_id)"
	local box_name="$(uci get kb.main.box_name)"
	local proj_prefix="$(uci get kbproj.main.prefix)"
	local proj_name="$(uci get kbproj.main.name)"
	# Setup System information
	uci -q batch <<-EOF
		set system.@system[0].hostname='${proj_prefix}-${state}-${dist_id}-${box_id}'
		set system.@system[0].description='${proj_name} ( ${dist_name} - ${box_name} )'
	EOF
	# Setup misc stuff
	## Change uhttpd ports and https redirect
	uci -q batch <<-EOF
		set uhttpd.main.listen_http='8080'
		set uhttpd.main.listen_https='8443'
		set uhttpd.main.redirect_https='1'
	EOF
	## set root password
	local proj_rootpw="$(uci -q get kbproj.main.rootpw)"
	usermod -p "${proj_rootpw}" root
}

kb_config_network() {
	local prefix="$(uci -q get kbproj.main.prefix)"
	local state="$(uci -q get kb.main.state)"
	local dist_id="$(uci -q get kb.main.dist_id)"
	local box_id="$(uci -q get kb.main.box_id)"
	local dist_nr="$(printf %d 0x$(uci -q get kb.main.dist_id))"
	local box_nr="$(printf %d 0x$(uci -q get kb.main.box_id))"
	# setup batman device
	[ -z "$(uci -q get network.bat0)" ] && {
		uci -q batch <<-EOF
			set network.bat0='interface'
			set network.bat0.proto='batadv'
			set network.bat0.routing_algo='BATMAN_IV'
			set network.bat0.gw_mode='off'
			set network.bat0.hop_penalty='30'
		EOF
	}
	# setup openwrt batman interface
	[ -z "$(uci -q get network.batmesh)" ] && {
		uci -q batch <<-EOF
			set network.batmesh='interface'
			set network.batmesh.proto='batadv_hardif'
			set network.batmesh.master='bat0'
			set network.batmesh.mtu='1536'
		EOF
	}
	[ "$(uci -q get network.@device[-1].name)" != "br-main" ] && {
		#TODO: improve check for bridge device. currently only the last device is checked for name match, which could be wrong
		device=$(uci add network device)
		uci -q batch <<-EOF
			set network.${device}.type='bridge'
			set network.${device}.name='br-main'
			add_list network.${device}.ports='bat0'
			set network.${device}.bridge_empty='1'
		EOF
	}

	# Setup management VLAN
	[ "$(uci -q get network.@bridge-vlan[-1].vlan)" != "254" ] && {
		#TODO: see above
		bridge_vlan=$(uci add network bridge-vlan)
		uci -q batch <<-EOF
			set network.${bridge_vlan}.vlan='254'
			set network.${bridge_vlan}.device='br-main'
			add_list network.${bridge_vlan}.ports='bat0:t'
		EOF
	}
	## Setup mesh management Interface
	[ -z "$(uci -q get network.mesh_mgmt)" ] && {
		uci -q batch <<-EOF
			set network.mesh_mgmt='interface'
			set network.mesh_mgmt.proto='static'
			set network.mesh_mgmt.device='br-main.254'
			set network.mesh_mgmt.ipaddr='10.254.${dist_nr}.${box_nr}'
			set network.mesh_mgmt.netmask='255.255.0.0'
			set network.mesh_mgmt.defaultroute='0'
		EOF
	}

	# Setup disctict specific VLAN
	[ "$(uci -q get network.@bridge-vlan[-1].vlan)" != "${dist_nr}" ] && {
		#TODO: see above
		bridge_vlan=$(uci add network bridge-vlan)
		uci -q batch <<-EOF
			set network.${bridge_vlan}.vlan='${dist_nr}'
			set network.${bridge_vlan}.device='br-main'
			add_list network.${bridge_vlan}.ports='bat0:t'
		EOF
	}
	## Setup mesh public Interface
	local box_ip_pub="10.${dist_nr}.${box_nr}.1"
	[ -z "$(uci -q get network.mesh_pub)" ] && {
		uci -q batch <<-EOF
			set network.mesh_pub='interface'
			set network.mesh_pub.proto='static'
			set network.mesh_pub.device='br-main.${dist_nr}'
			set network.mesh_pub.ipaddr='${box_ip_pub}'
			set network.mesh_pub.netmask='255.255.0.0'
			set network.mesh_pub.defaultroute='0'
		EOF
	}

	## Setup mesh public Interface
	[ -z "$(uci -q get dhcp.mesh_pub)" ] && {
		uci -q batch <<-EOF
			set dhcp.mesh_pub=dhcp
			set dhcp.mesh_pub.interface='mesh_pub'
			set dhcp.mesh_pub.start='10'
			set dhcp.mesh_pub.limit='240'
			set dhcp.mesh_pub.leasetime='12h'
			set dhcp.mesh_pub.netmask='255.255.255.0'
		EOF
	}

	# Setup wireless interfaces
	## Setup mesh interface
	## TODO: We currently assume radio0 is on the 2g band. improve this to find the 2g radio and mesh there
	local proj_ssid="$(uci -q get kbproj.main.ssid)"
	local proj_psk="$(uci -q get kbproj.main.psk)"
	[ -n "$(uci -q get wireless.radio0)" -a "$(uci -q get wireless.radio0.band)" = "2g" ] && {
		uci -q batch <<-EOF
			set wireless.kbmesh0=wifi-iface
			set wireless.kbmesh0.device='radio0'
			set wireless.kbmesh0.mode='mesh'
			set wireless.kbmesh0.encryption='sae'
			set wireless.kbmesh0.mesh_id='${proj_ssid}_mesh'
			set wireless.kbmesh0.mesh_fwding='0'
			set wireless.kbmesh0.mesh_rssi_threshold='0'
			set wireless.kbmesh0.key='${proj_psk}'
			set wireless.kbmesh0.network='batmesh'
			set wireless.kbmesh0.ifname='m-11s-0'
			set wireless.kbapmgmt0=wifi-iface
			set wireless.kbapmgmt0.device='radio0'
			set wireless.kbapmgmt0.mode='ap'
			set wireless.kbapmgmt0.ssid='${prefix}-${state}-${dist_id}-${box_id}_mgmt'
			set wireless.kbapmgmt0.encryption='psk2'
			set wireless.kbapmgmt0.key='${proj_psk}'
			set wireless.kbapmgmt0.network='mesh_mgmt'
			set wireless.kbapmgmt0.macaddr='random'
			set wireless.kbappub0=wifi-iface
			set wireless.kbappub0.device='radio0'
			set wireless.kbappub0.mode='ap'
			set wireless.kbappub0.ssid='${proj_ssid}'
			set wireless.kbappub0.encryption='none'
			set wireless.kbappub0.network='mesh_pub'
			set wireless.kbappub0.macaddr='random'
		EOF
		# Delete default APs if needed
		uci -q del wireless.default_radio0
		uci -q del wireless.default_radio1
		# Enable wireless radio
		uci set wireless.radio0.disabled=''
	}

	# Setup Firewall
	## Mesh management zone
	[ "$(uci -q get firewall.@zone[-1].name)" != "mesh_mgmt" ] && {
		#TODO: improve check for firewall zone. see bridge
		zone=$(uci add firewall zone)
		uci -q batch <<-EOF
			set firewall.${zone}.name='mesh_mgmt'
			set firewall.${zone}.input='ACCEPT'
			set firewall.${zone}.output='ACCEPT'
			set firewall.${zone}.forward='REJECT'
			add_list firewall.${zone}.network='mesh_mgmt'
		EOF
	}
	## Mesh public zone
	[ "$(uci -q get firewall.@zone[-1].name)" != "mesh_pub" ] && {
		#TODO: improve check for firewall zone. see bridge
		zone=$(uci add firewall zone)
		uci -q batch <<-EOF
			set firewall.${zone}.name='mesh_pub'
			set firewall.${zone}.input='ACCEPT'
			set firewall.${zone}.output='ACCEPT'
			set firewall.${zone}.forward='REJECT'
			add_list firewall.${zone}.network='mesh_pub'
		EOF
	}
	### Mesh public forwarding
	[ "$(uci -q get firewall.@forwarding[-1].src)" != "mesh_pub" ] && {
		#TODO: improve check for firewall forwarding. see bridge
		forwarding=$(uci add firewall forwarding)
		uci -q batch <<-EOF
			set firewall.${forwarding}.src='mesh_pub'
			set firewall.${forwarding}.dest='wan'
		EOF
	}
	### Setup host/DNS entries for captive portal forwarding
	[ "$(uci -q get dhcp.@domain[-1].src)" != "${proj_ssid}" ] && {
		#TODO: improve check for domain entry. see bridge
		## list of portal domains was partially taken from https://captivebehavior.wballiance.com/ , some other place i forgot about and our own tests
		#TODO: add FireOS
		#TODO: check with different devices
		#TODO: change this longterm to allow internet access after initial information/page
		local portal_domains='www.apple.com www.appleiphonecell.com captive.apple.com www.airport.us www.ibook.info www.itools.info www.thinkdifferent.us apple.com clients3.google.com clients4.google.com android.clients.google.com connectivitycheck.android.com connectivitycheck.gstatic.com www.gstatic.com www.google.com www.androidbak.net detectportal.firefox.com d2uzsrnmmf6tds.cloudfront.net msftncsi.com connectivitycheck.grapheneos.network connectivitycheck.platform.hicloud.com kiez.box'
		for portal_domain in ${portal_domains}; do
			domain=$(uci add dhcp domain)
			uci -q batch <<-EOF
				set dhcp.${domain}.name='${portal_domain}'
				set dhcp.${domain}.ip='${box_ip_pub}'
			EOF
		done
	}
}

# Check if board is supported (board_supported)
# and extract some board specific unique identifier (board_uid)
# INFO: the board_uid has to be some hexadecimal value
board=$(board_name)
case $board in
bananapi,bpi-r3|\
glinet,gl-ar300m16|\
glinet,gl-mt3000)
	board_supported=true
	#for these devices we can use the mac of ethernet interface eth0 as uid
	board_uid="$(cat /sys/class/net/eth0/address | tr -d : )"
	;;
*)
	board_supported=false
	;;
esac

# Setup supported boards only
if [ "${board_supported}" = true ] ; then
	echo "kb: configuring a ${board} ( with uid ${board_uid} )"
	kb_init_config "${board_uid}"
	kb_config_system
	kb_config_network
	uci commit
	echo "kb: configuration finished!"
else
	echo "kb: board ${board} not supported!"
fi

exit 0
